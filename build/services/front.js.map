{"version":3,"sources":["services/front.ts"],"names":[],"mappings":"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","file":"front.js","sourcesContent":["/*\n Copyright 2016-2017 Resin.io\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n */\n\nimport * as Promise from 'bluebird';\nimport { Comment, Conversation, Front } from 'front-sdk';\nimport * as _ from 'lodash';\nimport * as path from 'path';\nimport * as request from 'request-promise';\nimport { MessengerEmitResponse, ReceiptContext, TransmitContext } from '../utils/message-types';\nimport { FrontCommentEmitContext, FrontConversationEmitContext, FrontHandle } from './front-types';\nimport { MessageService } from './message-service';\nimport { ServiceEmitter, ServiceEvent, ServiceListener } from './service-types';\n\nexport class FrontService extends MessageService implements ServiceListener, ServiceEmitter {\n    private static _serviceName = path.basename(__filename.split('.')[0]);\n    private static session = new Front(process.env.FRONT_LISTENER_ACCOUNT_API_TOKEN);\n\n    /**\n     * Promise to find the comment history of a particular thread\n     * @param thread - id of the thread to search\n     * @param _room - id of the room in which the thread resides\n     * @param filter - criteria to match\n     */\n    public fetchNotes(thread: string, _room: string, filter: RegExp): Promise<string[]> {\n        return FrontService.session.conversation.listComments({conversation_id: thread})\n        .then((comments) => {\n            return _.filter(comments._results, (value) => {\n                return filter.test(value.body);\n            }).map((value) => {\n                return value.body;\n            });\n        });\n    }\n\n    /**\n     * Promise to turn the data enqueued into a generic message format\n     * @param data - Raw data from the enqueue, remembering this is as dumb and quick as possible\n     * @returns {Bluebird<ReceiptContext>} - A promise that resolves to the generic form of the event\n     */\n    public makeGeneric(data: ServiceEvent): Promise<ReceiptContext> {\n        // Calculate common request details once\n        const getGeneric = {\n            headers: {\n                authorization: `Bearer ${process.env.FRONT_LISTENER_ACCOUNT_API_TOKEN}`\n            },\n            json: true,\n            method: 'GET',\n            uri: '', // Will be over-written\n        };\n        // Make specific forms of the request object for further details\n        const getEvent = _.cloneDeep(getGeneric);\n        getEvent.uri = `https://api2.frontapp.com/events/${data.rawEvent.id}`;\n        const getInboxes = _.cloneDeep(getGeneric);\n        getInboxes.uri = `https://api2.frontapp.com/conversations/${data.rawEvent.conversation.id}/inboxes`;\n        const getMessages = _.cloneDeep(getGeneric);\n        getMessages.uri = `https://api2.frontapp.com/conversations/${data.rawEvent.conversation.id}/messages`;\n        const getComments = _.cloneDeep(getGeneric);\n        getComments.uri = `https://api2.frontapp.com/conversations/${data.rawEvent.conversation.id}/comments`;\n        // Gather further details of the enqueued event\n        return Promise.props({\n            comments: request(getComments),\n            event: request(getEvent),\n            inboxes: request(getInboxes),\n            messages: request(getMessages),\n        })\n        .then((details: {comments: any, event: any, inboxes: any, messages: any}) => {\n            // Pre-calculate a couple of values, to save line width\n            const message = details.event.target.data;\n            const first = details.comments._results.length + details.messages._results.length === 1;\n            const metadata = MessageService.extractMetadata(message.text || message.body);\n            // Attempt to find the author of a message from the various places front might store it\n            let author = 'Unknown';\n            if (message.author) {\n                author = message.author.username;\n            } else {\n                for (const recipient of message.recipients) {\n                    if (recipient.role === 'from') {\n                        author = recipient.handle;\n                    }\n                }\n            }\n            // Return the generic form of this event\n            return {\n                action: 'create',\n                first,\n                genesis: metadata.genesis || data.source || this.serviceName,\n                hidden: first ? metadata.hidden : details.event.type === 'comment',\n                source: this.serviceName,\n                sourceIds: {\n                    flow: details.inboxes._results[0].id,\n                    message: message.id,\n                    thread: details.event.conversation.id,\n                    url: `https://app.frontapp.com/open/${details.event.conversation.id}`,\n                    user: author,\n                },\n                text: metadata.content,\n                title: details.event.conversation.subject,\n            } as ReceiptContext;\n        });\n    }\n\n    /**\n     * Promise to turn the generic message format into a specific form to be emitted\n     * @param data - Generic message format object to be encoded\n     * @returns {Bluebird<FlowdockEmitContext>} - Promise that resolves to the emit suitable form\n     */\n    public makeSpecific(data: TransmitContext): Promise<FrontCommentEmitContext|FrontConversationEmitContext> {\n        // Attempt to find the thread ID to know if this is a new conversation or not\n        const conversationId = data.toIds.thread;\n        if (!conversationId) {\n            // Find the title and user ID for the event\n            const subject = data.title;\n            if (!subject) {\n                throw new Error('Cannot create Front Conversation without a title');\n            }\n            return this.fetchUserId(data.toIds.user).then((userId) => {\n                // The specific form that may be emitted\n                return {\n                    author_id: userId,\n                    body: data.text + '\\n\\n---\\n' + MessageService.stringifyMetadata(data, 'plaintext'),\n                    // Find the relevant channel for the inbox\n                    channel_id: JSON.parse(process.env.FRONT_INBOX_CHANNELS)[data.toIds.flow],\n                    metadata: {\n                        thread_ref: data.sourceIds.thread,\n                    },\n                    options: {\n                        archive: false,\n                    },\n                    sender: {\n                        handle: data.toIds.user,\n                    },\n                    subject,\n                    to: [data.sourceIds.user],\n                    type: 'conversation',\n                } as FrontConversationEmitContext;\n            });\n        }\n        return Promise.props({\n            conversation: FrontService.session.conversation.get({conversation_id: conversationId}),\n            userId: this.fetchUserId(data.toIds.user)\n        }).then((details: {conversation: Conversation, userId: string}) => {\n            return {\n                author_id: details.userId,\n                body: data.text + '\\n\\n---\\n' + MessageService.stringifyMetadata(data, 'plaintext'),\n                conversation_id: conversationId,\n                options: {\n                    archive: false,\n                },\n                sender: {\n                    handle: data.toIds.user,\n                },\n                subject: details.conversation.subject,\n                type: data.hidden ? 'comment' : 'message',\n            } as FrontCommentEmitContext;\n        });\n    }\n\n    /**\n     * Turns the generic, messenger, name for an event into a specific trigger name for this class\n     * @param eventType - Name of the event to translate, eg 'message'\n     * @returns {string} - This class's equivalent, eg 'post'\n     */\n    public translateEventName(eventType: string): string {\n        const equivalents: {[key: string]: string} = {\n            message: 'event',\n        };\n        return equivalents[eventType];\n    }\n\n    /**\n     * Activate this service as a listener\n     */\n    protected activateMessageListener(): void {\n        // This swallows response attempts to the channel, since we notice them on the inbox instead\n        MessageService.app.post('/front-dev-null', (_formData, response) => {\n            response.send();\n        });\n        // Create an endpoint for this listener and enqueue events\n        MessageService.app.post(`/${this.serviceName}/`, (formData, response) => {\n            this.queueEvent({\n                data: {\n                    cookedEvent: {\n                        context: formData.body.conversation.id,\n                        type: 'event',\n                    },\n                    rawEvent: formData.body,\n                    source: this.serviceName,\n                },\n                workerMethod: this.handleEvent,\n            });\n            response.send();\n        });\n    }\n\n    /**\n     * Deliver the payload to the service. Sourcing the relevant context has already been performed\n     * @param data - The object to be delivered to the service\n     * @returns {Promise<MessengerEmitResponse>} - Response from the service endpoint\n     */\n    protected sendPayload(data: FrontCommentEmitContext|FrontConversationEmitContext): Promise<MessengerEmitResponse> {\n        if (data.type === 'comment') {\n            // The event is sent to the comment method\n            return FrontService.session.comment.create(data).then((comment: Comment) => {\n                return {\n                    response: {\n                        message: comment.id,\n                        thread: data.conversation_id,\n                    },\n                    source: this.serviceName,\n                };\n            });\n        } else if (data.type === 'message') {\n            // The event is sent to the message (reply) method\n            return FrontService.session.message.reply(data).then(() => {\n                return {\n                    response: {\n                        message: `${data.author_id}:${new Date().getTime()}`,\n                        thread: data.conversation_id,\n                    },\n                    source: this.serviceName,\n                };\n            });\n        } else if (data.type === 'conversation') {\n            // The event is sent to the message (create) method\n            return FrontService.session.message.send(data).then(() => {\n                // This is because the response is ASAP and doesn't include the conversation id\n                return this.findConversation(data.subject)\n                .then((conversationId) => {\n                    return {\n                        response: {\n                            message: `${data.author_id}:${new Date().getTime()}`,\n                            thread: conversationId,\n                            url: `https://app.frontapp.com/open/${conversationId}`,\n                        },\n                        source: this.serviceName,\n                    };\n                });\n            });\n        }\n        throw new Error(`Front payload type ${data.type} not supported`);\n    }\n\n    /**\n     * Find the ID of a user specified by username\n     * @param username - target username to search for\n     * @returns {Promise<string>} - Promise that resolves to the user id\n     */\n    private fetchUserId(username: string): Promise<string> {\n        // Request a list of all teammates\n        const getTeammates = {\n            headers: {\n                authorization: `Bearer ${process.env.FRONT_LISTENER_ACCOUNT_API_TOKEN}`\n            },\n            json: true,\n            method: 'GET',\n            uri: 'https://api2.frontapp.com/teammates',\n        };\n        return request(getTeammates).then((teammates: {_results: Array<{username: string, id: string}>}) => {\n            // Resolve to the ID of the first matching teammate\n            return _.filter(teammates._results, (teammate) => {\n                return teammate.username === username;\n            }).map((teammate) => {\n                return teammate.id;\n            })[0];\n        });\n    }\n\n    /**\n     * Attempt to find a recent conversation ID from it's subject line\n     * Done by subject because the conversation_reference provided is sometimes junk\n     * @param subject - target subject line to search for\n     * @param attemptsLeft - Since conversations take time to propagate this method may recurse\n     * @returns {Bluebird<string>} - Promise that resolves to the ID of the conversation\n     */\n    private findConversation(subject: string, attemptsLeft: number = 10): Promise<string> {\n        // Find all the recent conversations\n        return FrontService.session.conversation.list().then((response) => {\n            // Filter these down to matching conversations\n            const conversationsMatched = _.filter(response._results, (conversation) => {\n                return conversation.subject === subject;\n            });\n            // Return the most recent, if any\n            if (conversationsMatched.length > 0) {\n                return conversationsMatched[0].id;\n            }\n            // Recurse up to the specified number of times\n            if (attemptsLeft > 1) {\n                return this.findConversation(subject, attemptsLeft - 1);\n            } else {\n                throw new Error('Could not find relevant conversation.');\n            }\n        });\n    }\n\n    /**\n     * The name of this service, as required by the framework\n     * @returns {string} - 'flowdock'\n     */\n    get serviceName(): string {\n        return FrontService._serviceName;\n    }\n\n    /**\n     * Retrieve the SDK API handle for Front.\n     * @return  The Front SDK API handle.\n     */\n    get apiHandle(): FrontHandle {\n        return {\n            front: FrontService.session\n        };\n    }\n}\n\n/**\n * Build this class, typed and activated as a listener\n * @returns {ServiceListener}\n */\nexport function createServiceListener(): ServiceListener {\n    return new FrontService(true);\n}\n\n/**\n * Build this class, typed as an emitter\n * @returns {ServiceEmitter}\n */\nexport function createServiceEmitter(): ServiceEmitter {\n    return new FrontService(false);\n}\n\n/**\n * Build this class, typed as a message service\n * @returns {MessageService}\n */\nexport function createMessageService(): MessageService {\n    return new FrontService(false);\n}\n"],"sourceRoot":"../../lib"}